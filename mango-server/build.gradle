plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE' // 스프링 부트의 의존성들을 관리해 주는 플러그인
    id 'org.asciidoctor.convert' version '1.5.8' // AsciiDoc 파일을 컨버팅하고 Build 폴더에 복사하기 위한 플러그인
    id 'java'
    id 'jacoco' // 코드 커버리지 체크 라이브러리
}

group = 'com.messenger.mango'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11' // 자바 버전

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext { // snippets 생성 위치를 지정한다
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation' // spring boot 2.3.0 부터 validation이 web-starter에서 분리됨
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    outputs.dir snippetsDir // 테스트가 실행될 때 snippets들이 snippetsDir 위치에 생성되게 한다
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    useJUnitPlatform()

    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    // 코드 커버리지 결과를 리포트로 생성
    reports {
        // 원하는 타입의 report 생성 가능
        html.enabled true
        xml.enabled false
        csv.enabled false
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    // 코드 커버리지 결과가 기준을 충족하는지 검증
    violationRules {
        rule {
            // element가 없을시 프로젝트 전체 파일을 합친 값 기준
            limit {
                // counter 지정하지 않을시 'INSTRUCTION'
                // value 지정하지 않을시 'COVEREDRATIO'
                minimum = 0.40
            }
        }

//        rule {
//            enabled = true
//
//            element = 'CLASS' // rule을 체크할 단위
//
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.90
//            }
//
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }
//
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 200
//            }
//
//            // 커버리지 체크를 제외할 클래스들
//            excludes = [
//                    '*.test.*'
//            ]
//        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Run test with coverage'

    dependsOn (
            ':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification'
    )

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

asciidoctor {
    inputs.dir snippetsDir // 입력 snippets가 생성될 위치를 지정한다
    dependsOn test // 문서가 만들어지기 전에 test가 실행되도록 한다
}

bootJar {
    dependsOn asciidoctor // jar가 생성되기 전에 asciidoc 태스크가 실행되도록 한다
    from("${asciidoctor.outputDir}/html5") { // jar static 폴더에 완성된 문서를 HTML로 생성한다
        into 'static/docs'
    }
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    // 소스 코드에 html파일을 복사
    from file("build/asciidoc/html5")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}
